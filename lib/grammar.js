/* parser generated by jison 0.4.17 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var grammar = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[7,12,14,17,20,24,29,30,34],$V1=[2,2],$V2=[1,11],$V3=[1,13],$V4=[1,14],$V5=[1,9],$V6=[1,19],$V7=[1,20],$V8=[1,15],$V9=[1,16],$Va=[1,12],$Vb=[6,7,11,15,16],$Vc=[1,27],$Vd=[1,31],$Ve=[1,32],$Vf=[1,33],$Vg=[1,34],$Vh=[1,35],$Vi=[1,36],$Vj=[1,37],$Vk=[1,38],$Vl=[1,39],$Vm=[1,40],$Vn=[1,41],$Vo=[1,42],$Vp=[1,43],$Vq=[1,28],$Vr=[1,30],$Vs=[1,29],$Vt=[6,7,9,10,11,12,13,14,15,16,17,18,19,20,21,24,29,30,32,33,34],$Vu=[6,7,11,15,16,18,19],$Vv=[1,56],$Vw=[1,60],$Vx=[1,61],$Vy=[1,62],$Vz=[7,9,10,11,12,13,14,15,16,17,18,19,20,21,24,29,30,32,33,34],$VA=[1,71],$VB=[7,11,16],$VC=[7,15,16],$VD=[11,16],$VE=[15,16];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"expressions":3,"value":4,"optionalWhiteSpace":5,"EOF":6,"WHITESPACE":7,"tokensNoEscapeOrQuote":8,"@":9,"DOT":10,"}":11,"{":12,":":13,"[":14,"]":15,",":16,"NULL":17,"e":18,"E":19,"HYPHON":20,"PLUS":21,"boolean":22,"decimal":23,"NUMBER":24,"frac":25,"intOrDecimal":26,"scientific":27,"number":28,"TRUE":29,"FALSE":30,"escapedChar":31,"ESCAPE_CHAR":32,"OTHER_CHAR":33,"D_QUOTE":34,"escapeStringContent":35,"escapeString":36,"object":37,"array":38,"elements":39,"members":40,"pair":41,"key":42,"keyName":43,"$accept":0,"$end":1},
terminals_: {2:"error",6:"EOF",7:"WHITESPACE",9:"@",10:"DOT",11:"}",12:"{",13:":",14:"[",15:"]",16:",",17:"NULL",18:"e",19:"E",20:"HYPHON",21:"PLUS",24:"NUMBER",29:"TRUE",30:"FALSE",32:"ESCAPE_CHAR",33:"OTHER_CHAR",34:"D_QUOTE"},
productions_: [0,[3,3],[5,0],[5,2],[8,1],[8,1],[8,1],[8,1],[8,1],[8,1],[8,1],[8,1],[8,1],[8,1],[8,1],[8,1],[8,1],[8,1],[23,2],[25,2],[26,2],[26,1],[26,2],[26,1],[27,3],[27,4],[27,4],[27,3],[27,4],[27,4],[28,1],[28,1],[22,1],[22,1],[31,2],[31,2],[31,2],[31,2],[31,2],[31,2],[35,1],[35,1],[35,1],[35,1],[35,1],[35,2],[35,2],[35,2],[35,2],[35,2],[36,3],[36,2],[4,2],[4,2],[4,2],[4,2],[4,2],[4,2],[38,3],[38,3],[39,2],[39,4],[37,3],[37,3],[40,2],[40,4],[41,4],[42,4],[43,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return $$[$0-2]; 
break;
case 2: case 51: case 58: case 62:
this.$ = "";
break;
case 3: case 18: case 19: case 20: case 22: case 34: case 35: case 36: case 37: case 38: case 39: case 45: case 46: case 47: case 48: case 49:
this.$ = $$[$0-1] + $$[$0];
break;
case 24: case 27:
this.$ = $$[$0-2] + $$[$0-1] + $$[$0];
break;
case 25: case 26: case 28: case 29:
this.$ = $$[$0-3] + $$[$0-2] + $$[$0-1] + $$[$0];
break;
case 50: case 59: case 60: case 63: case 64:
this.$ = $$[$0-1];
break;
case 52:

        function byteCount(s) {
          return encodeURI(s).split(/%(?:u[0-9A-F]{2})?[0-9A-F]{2}|./).length - 1;
        }
        this.$ = "ST" + byteCount($$[$0]) + $$[$0]
      
break;
case 53:

        function byteCount(s) {
          return encodeURI(s).split(/%(?:u[0-9A-F]{2})?[0-9A-F]{2}|./).length - 1;
        }
        this.$ = "OB" + byteCount($$[$0]) + $$[$0]
      
break;
case 54:

        function byteCount(s) {
          return encodeURI(s).split(/%(?:u[0-9A-F]{2})?[0-9A-F]{2}|./).length - 1;
        }
        this.$ = "AR" + byteCount($$[$0]) + $$[$0]
      
break;
case 55:

        function byteCount(s) {
          return encodeURI(s).split(/%(?:u[0-9A-F]{2})?[0-9A-F]{2}|./).length - 1;
        }
        this.$ = "BO" + byteCount($$[$0]) + $$[$0]
      
break;
case 56:

        function byteCount(s) {
          return encodeURI(s).split(/%(?:u[0-9A-F]{2})?[0-9A-F]{2}|./).length - 1;
        }
        this.$ = "NL" + 0
      
break;
case 57:

        function byteCount(s) {
          return encodeURI(s).split(/%(?:u[0-9A-F]{2})?[0-9A-F]{2}|./).length - 1;
        }
        this.$ = "NU" + (byteCount($$[$0]) + 1) + "#" + $$[$0]
      
break;
case 61: case 65:
this.$ = $$[$0-3] + $$[$0-1];
break;
case 66:


         function byteCount(s) {
           return encodeURI(s).split(/%(?:u[0-9A-F]{2})?[0-9A-F]{2}|./).length - 1;
         }
         this.$ = "PA" + byteCount($$[$0-2]) + $$[$0-2] + $$[$0]
    
break;
case 67:
this.$ = $$[$0-2];
break;
}
},
table: [o($V0,$V1,{3:1,4:2,5:3}),{1:[3]},o([6,7],$V1,{5:4}),{7:$V2,12:$V3,14:$V4,17:$V5,20:$V6,22:8,23:21,24:$V7,26:17,27:18,28:10,29:$V8,30:$V9,34:$Va,36:5,37:6,38:7},{6:[1,22],7:$V2},o($Vb,[2,52]),o($Vb,[2,53]),o($Vb,[2,54]),o($Vb,[2,55]),o($Vb,[2,56]),o($Vb,[2,57]),o([6,7,11,12,13,14,15,16,17,20,24,29,30,34],[2,3]),{7:$Vc,8:26,9:$Vd,10:$Ve,11:$Vf,12:$Vg,13:$Vh,14:$Vi,15:$Vj,16:$Vk,17:$Vl,18:$Vm,19:$Vn,20:$Vo,21:$Vp,22:44,24:$Vq,29:$V8,30:$V9,31:25,32:$Vr,33:$Vs,34:[1,24],35:23},o([7,11,34],$V1,{5:45,40:46,41:47}),o([7,12,14,15,17,20,24,29,30,34],$V1,{5:48,39:49,4:50}),o($Vt,[2,32]),o($Vt,[2,33]),o($Vb,[2,30],{18:[1,51],19:[1,52]}),o($Vb,[2,31]),{23:54,24:[1,53]},o($Vu,[2,21],{25:55,10:$Vv}),o($Vu,[2,23]),{1:[2,1]},{7:$Vw,8:59,9:$Vd,10:$Ve,11:$Vf,12:$Vg,13:$Vh,14:$Vi,15:$Vj,16:$Vk,17:$Vl,18:$Vm,19:$Vn,20:$Vo,21:$Vp,22:44,24:$Vx,29:$V8,30:$V9,31:58,32:$Vr,33:$Vy,34:[1,57]},o($Vb,[2,51]),o($Vz,[2,40]),o($Vz,[2,41]),o($Vz,[2,42]),o($Vz,[2,43]),o($Vz,[2,44]),{7:[1,68],8:63,9:$Vd,10:$Ve,11:$Vf,12:$Vg,13:$Vh,14:$Vi,15:$Vj,16:$Vk,17:$Vl,18:$Vm,19:$Vn,20:$Vo,21:$Vp,22:44,24:[1,67],29:$V8,30:$V9,32:[1,65],33:[1,64],34:[1,66]},o($Vz,[2,4]),o($Vz,[2,5]),o($Vz,[2,6]),o($Vz,[2,7]),o($Vz,[2,8]),o($Vz,[2,9]),o($Vz,[2,10]),o($Vz,[2,11]),o($Vz,[2,12]),o($Vz,[2,13]),o($Vz,[2,14]),o($Vz,[2,15]),o($Vz,[2,16]),o($Vz,[2,17]),{7:$V2,11:[1,69],34:$VA,42:70},{11:[1,72],16:[1,73]},o($VB,$V1,{5:74}),{7:$V2,12:$V3,14:$V4,15:[1,75],17:$V5,20:$V6,22:8,23:21,24:$V7,26:17,27:18,28:10,29:$V8,30:$V9,34:$Va,36:5,37:6,38:7},{15:[1,76],16:[1,77]},o($VC,$V1,{5:78}),{20:[1,80],21:[1,81],24:[1,79]},{20:[1,83],21:[1,84],24:[1,82]},o($Vu,[2,20],{25:55,10:$Vv}),o($Vu,[2,22]),o($Vu,[2,18]),{24:[1,85]},o($Vb,[2,50]),o($Vz,[2,45]),o($Vz,[2,46]),o($Vz,[2,47]),o($Vz,[2,48]),o($Vz,[2,49]),o($Vz,[2,34]),o($Vz,[2,35]),o($Vz,[2,36]),o($Vz,[2,37]),o($Vz,[2,38]),o($Vz,[2,39]),o($Vb,[2,62]),{13:[1,86]},{7:$Vc,8:26,9:$Vd,10:$Ve,11:$Vf,12:$Vg,13:$Vh,14:$Vi,15:$Vj,16:$Vk,17:$Vl,18:$Vm,19:$Vn,20:$Vo,21:$Vp,22:44,24:$Vq,29:$V8,30:$V9,31:25,32:$Vr,33:$Vs,35:88,43:87},o($Vb,[2,63]),o([7,34],$V1,{41:89,5:90}),o($VD,[2,64],{7:$V2}),o($Vb,[2,58]),o($Vb,[2,59]),o($V0,$V1,{5:3,4:91}),o($VE,[2,60],{7:$V2}),o($Vb,[2,24]),{24:[1,92]},{24:[1,93]},o($Vb,[2,27]),{24:[1,94]},{24:[1,95]},o($Vu,[2,19]),o($V0,$V1,{5:3,4:96}),{34:[1,97]},{7:$Vw,8:59,9:$Vd,10:$Ve,11:$Vf,12:$Vg,13:$Vh,14:$Vi,15:$Vj,16:$Vk,17:$Vl,18:$Vm,19:$Vn,20:$Vo,21:$Vp,22:44,24:$Vx,29:$V8,30:$V9,31:58,32:$Vr,33:$Vy,34:[2,68]},o($VB,$V1,{5:98}),{7:$V2,34:$VA,42:70},o($VC,$V1,{5:99}),o($Vb,[2,25]),o($Vb,[2,26]),o($Vb,[2,28]),o($Vb,[2,29]),o($VB,[2,66]),o([7,13],$V1,{5:100}),o($VD,[2,65],{7:$V2}),o($VE,[2,61],{7:$V2}),{7:$V2,13:[2,67]}],
defaultActions: {22:[2,1]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        function _parseError (msg, hash) {
            this.message = msg;
            this.hash = hash;
        }
        _parseError.prototype = Error;

        throw new _parseError(str, hash);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return "@"
break;
case 1:return "NUMBER"
break;
case 2:return 29
break;
case 3:return 30
break;
case 4:return 7
break;
case 5:return "e"
break;
case 6:return 19
break;
case 7:return 17
break;
case 8:return ":"
break;
case 9:return "PLUS"
break;
case 10:return "HYPHON"
break;
case 11:return "DOT"
break;
case 12:return "D_QUOTE"
break;
case 13:return "ESCAPE_CHAR"
break;
case 14:return "{"
break;
case 15:return "}"
break;
case 16:return "["
break;
case 17:return "]"
break;
case 18:return ","
break;
case 19:return 33
break;
case 20:return 6
break;
}
},
rules: [/^(?:@)/,/^(?:[0-9]+)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:\s+)/,/^(?:[e])/,/^(?:[E])/,/^(?:null\b)/,/^(?::)/,/^(?:\+)/,/^(?:-)/,/^(?:\.)/,/^(?:")/,/^(?:\\)/,/^(?:\{)/,/^(?:\})/,/^(?:\[)/,/^(?:\])/,/^(?:,)/,/^(?:.)/,/^(?:$)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = grammar;
exports.Parser = grammar.Parser;
exports.parse = function () { return grammar.parse.apply(grammar, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}